#!/usr/bin/env node
var debug = require('debug')('restapi');
var moment = require('moment');

var libs = process.cwd() + '/libs/';
var config = require(libs + 'config');
var log = require(libs + 'log')(module);
var app = require(libs + 'app');
var path = require('path');

var convert = require('../libs/utils/convert');//   convert from base64 to image

app.set('port', process.env.PORT || config.get('port') || 3000);

//  HTTPS
var https = require('https');
var fs = require('fs');
var options = {
    key: fs.readFileSync('/etc/letsencrypt/live/wxapp.kaytion.com/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/wxapp.kaytion.com/fullchain.pem')
}

// var server = https.createServer(options, app);
var httpsServer =  https.createServer(options, app).listen(app.get('port'), function() {
    debug('Express server listening on port ' + app.get('port'));
    log.info('Express server listening on port ' + app.get('port'));
});

//  websocket SSL/TLS instance
var WebsocketServer = require('ws').Server;
var wss = new WebsocketServer({
    server: httpsServer
});

//  broadcast
function broadcastSend(data) {
    wss.clients.forEach(function each(client) {
        if (client.readyState === 1) {
            client.send(data);
            console.log('broadcast: %s', data);
        }
    });
};

//  json judge
var isJson = function(obj){
    var isjson = typeof(obj) == "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length;
    return isjson;
}

var pingRes = {
    method : "pong"
}

var openDoor = {
    method : "cmd_relay",
    unionId : "532323",
    time: moment().format("YYYYMMDDHHmmss"),
    target: "1",
    param: {
        status: "on",
        index: "1",
        dealy: "5"
    }

}
wss.on('connection', function connection(ws) {
    ws.send('wss was success');
    ws.on('message', function incoming(message) {
        console.log('received: %s,\n ----%s----', message);
        var jmsg = JSON.parse(message);
        if (!isJson(jmsg)) {
            if (message.length > 100) {
                convert.Decode(message, 'public/gate.jpg');
            }  else {
                ws.send('door is stand by');
            }
        } else {
            switch (jmsg.method){
                case 'hello': {
                    ws.send(JSON.stringify(pingRes));
                    break;
                }
                case 'ping': {
                    ws.send(JSON.stringify(pingRes));
                    break;
                }

                /** 查找成功 **/
                case 'find_success': {
                    break;
                }

                /** 开门命令 **/
                case 'gate_command': {
                    broadcastSend(JSON.stringify(openDoor));
                    break;
                }

                /** 上传图片 **/
                case 'put_image' : {
                    if (message.length > 20) {
                        convert.Decode(message, 'public/gate.jpg');
                    }
                    break;
                }

                default:
                    break;
            }
        }

    });

});

